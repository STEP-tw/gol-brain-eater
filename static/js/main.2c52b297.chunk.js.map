{"version":3,"sources":["_src/gameOfLife.js","_src/lib.js","_src/util.js","Cell.js","App.js","serviceWorker.js","index.js"],"names":["iterateGrid","require","getDimensions","topLeft","bottomRight","length","breadth","module","exports","nextGeneration","currGeneration","bounds","currentAliveCells","slice","_getDimensions","coordinates","validCoordinates","filter","x","isLessThanBottomRight","limitCoordinate","coordinate","bind","validateCoordinates","startingPoint","subtractCoordinatesFromStart","firstCoordinate","secondCoordinate","map","mapCoordinatesFromOrigin","point","mapCoordinatesFromPoint","mapCoordinates","generate2DGrid","extractNeighbourElements","convertTo1D","generateAliveCell","displayGrid","grid","cellCoordinates","generateGrid","dimensions","aliveCells","reduce","countNeighbours","row","column","cell","neighbours","extractNeighbours","matrix","extractNeighboursOfColumn","updateStatus","noOfNeighbours","cellStatus","evaluateStatus","nextGen","push","replaceWithRect","elements","justify","position","extractedArray","undefined","y","concat","console","clear","line","Array","fill","join","displayableGrid","a","rows","columns","Cell","react_default","createElement","width","height","this","props","color","col","stroke","strokeWidth","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","gen","_this2","timerID","setInterval","tick","setState","cells","colors","i","j","src_Cell","genCells","forEach","toColourLookup","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c52b297.chunk.js","sourcesContent":["let {iterateGrid} = require('./lib.js');\n\nconst subtractCoordinates = function(firstCoordinate, secondCoordinate) {\n  let x =  secondCoordinate[0]-firstCoordinate[0] ;\n  let y =  secondCoordinate[1]-firstCoordinate[1] ;\n  return [x, y];\n};\n\nconst addCoordinates = function(firstCoordinate, secondCoordinate) {\n  let x = firstCoordinate[0] + secondCoordinate[0];\n  let y = firstCoordinate[1] + secondCoordinate[1];\n  return [x, y];\n};\n\nconst isLessThan = function(limitCoordinate, coordinate) {\n  return (\n    limitCoordinate[0] >= coordinate[0] && limitCoordinate[1] >= coordinate[1]\n  );\n};\n\nconst mapCoordinatesFromOrigin = function(startingPoint, coordinates) {\n  let subtractCoordinatesFromStart = subtractCoordinates.bind(\n    null,\n    startingPoint\n  );\n  let validCoordinates = coordinates.map(subtractCoordinatesFromStart);\n  return validCoordinates;\n};\n\nconst validateCoordinates = function(bottomRight, coordinates) {\n  let validCoordinates = coordinates.filter(x => x[0] >= 0 && x[1] >= 0); //remove negative coordinates\n  let isLessThanBottomRight = isLessThan.bind(null, bottomRight);\n  validCoordinates = validCoordinates.filter(isLessThanBottomRight);\n  return validCoordinates;\n};\n\nconst mapCoordinates = function(point, coordinates) {\n  let mapCoordinatesFromPoint = addCoordinates.bind(null, point);\n  return coordinates.map(mapCoordinatesFromPoint);\n};\n\nconst getDimensions = function(topLeft,bottomRight){\n  let length = bottomRight[0] - topLeft[0] + 1;\n  let breadth = bottomRight[1] - topLeft[1] + 1;\n  return {length,breadth};\n}\n\nconst nextGeneration = function(currGeneration, bounds) {\n  let {topLeft, bottomRight} = bounds;\n  let currentAliveCells = currGeneration.slice();\n  let {length,breadth} = getDimensions(topLeft,bottomRight);\n  currentAliveCells = mapCoordinatesFromOrigin(topLeft, currentAliveCells);\n  let bottomRightFromOrigin = [length - 1, breadth - 1];\n  currentAliveCells = validateCoordinates(\n    bottomRightFromOrigin,\n    currentAliveCells,\n  );\n  let nextGen = iterateGrid({length, breadth}, currentAliveCells);\n  return mapCoordinates(topLeft,nextGen);\n};\n\nmodule.exports = {nextGeneration,getDimensions};\n","let {\n  generate2DGrid,\n  extractNeighbourElements,\n  convertTo1D,\n  displayGrid\n} = require('./util.js');\n\n\nconst generateAliveCell = function(grid,cellCoordinates){\n  grid[cellCoordinates[0]][cellCoordinates[1]] = 1;\n  return grid;\n}\n\nconst generateGrid = function(dimensions, aliveCells) {\n  let {length,breadth} = dimensions;\n  let grid = generate2DGrid(length, breadth);\n  grid = aliveCells.reduce(generateAliveCell,grid);\n  return grid;\n};\n\nexports.generateGrid = generateGrid;\n\nconst countNeighbours = function(row, column, grid) {\n  let cell = grid[row][column];\n  let neighbours = extractNeighbours(row,column,grid);\n  let aliveNeighbours = convertTo1D(neighbours).filter(x=>x==1);\n  return aliveNeighbours.length-cell;\n};\n\nexports.countNeighbours = countNeighbours;\n\n\nconst extractNeighbours = function(row,column,matrix){\n  let extractNeighboursOfColumn = extractNeighbourElements.bind(null,column);\n  return  extractNeighbourElements(row,matrix).map(extractNeighboursOfColumn);\n}\nexports.extractNeighbours = extractNeighbours;\n\nconst updateStatus = function(grid,row,column){\n  let noOfNeighbours = countNeighbours(row, column, grid);\n  let cellStatus = grid[row][column];\n  cellStatus = evaluateStatus(noOfNeighbours,cellStatus); \n  return cellStatus;\n}\n\nconst iterateGrid = function(dimensions,aliveCells) {\n  let {length,breadth} = dimensions;\n  let grid = generateGrid(dimensions,aliveCells);\n  let nextGen = [];\n  for (let row = 0; row < length; row++) {\n    for (let column = 0; column < breadth; column++) {\n      updateStatus(grid,row,column) == 1 && nextGen.push([row,column]);\n   }\n  }\n  return nextGen;\n};\n\nexports.iterateGrid = iterateGrid;\n\nconst evaluateStatus = function(noOfNeighbours,cellStatus){\n  let willRemainAlive = noOfNeighbours == 2 && cellStatus;\n  let willLive  = noOfNeighbours == 3 && 1;\n  return willRemainAlive || willLive || 0;\n}\n\nexports.evaluateStatus = evaluateStatus;\n","const generate2DGrid = function(rows,columns){\n  let grid = new Array(rows).fill(columns);\n  grid = grid.map(x=> new Array(x).fill(0));\n  return grid;\n}\n\nconst replaceWithRect = function(elements){\n  return elements.map(x=>x==1?'▓':' ');\n}\n\nconst justify= function(elements){\n  return elements.map(x=> \" \"+x+\" \");\n}\n\nexports.justify = justify;\n\n\nconst displayGrid = function(grid) {\n  console.clear();\n  let line = new Array(grid.length).fill(\"----\").join(\"\");\n  let displayableGrid = grid.map(replaceWithRect)\n  displayableGrid = displayableGrid.map((a)=>justify(a).join(\"|\"))\n  return displayableGrid.join('\\n'+line+'\\n');\n};\n\nconst convertTo1D= function(matrix){\n  return matrix.reduce((x,y)=>x.concat(y));\n}\n\nconst extractNeighbourElements = function(position,elements){\n  let extractedArray = [];\n  extractedArray.push(elements[position-1]);\n  extractedArray.push(elements[position]);\n  extractedArray.push(elements[position+1]);\n  return extractedArray.filter(x=>x!=undefined);\n}\n\n\nexports.extractNeighbourElements = extractNeighbourElements;\n\nexports.convertTo1D = convertTo1D;\n\nexports.displayGrid = displayGrid;\n\nexports.generate2DGrid = generate2DGrid;  \n\n\n\n\n","import React, { Component } from 'react';\n\nclass Cell extends Component {\n  render() {\n    return <rect width=\"10\" \n    height=\"10\"\n    fill={this.props.color || \"white\"}\n    x={this.props.col*10} \n    y={this.props.row*10} \n    stroke=\"lightgray\" \n    strokeWidth={1}></rect>\n  }\n}\n\nexport default Cell;","import React, { Component } from 'react';\nimport Cell from './Cell';\nimport {nextGeneration} from './_src/gameOfLife.js';\n\nconst genId = (a) => a.join(\"_\");\n\nconst genCells = (colors) => {\n  let cells = [];\n  for(let i=0;i<17;i++) {\n    for(let j=0;j<17;j++) {\n      cells.push(<Cell row={i} col={j} color={colors[`${i}_${j}`]}/>);\n    }\n  }\n  return cells;\n}\n\nconst toColourLookup=(cells) => {\n  let colors={};\n  cells.forEach(cell => {\n    colors[genId(cell)]=\"black\"\n  });\n  return colors;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {gen: this.props.gen};\n  }\n  componentDidMount() {\n    this.timerID = setInterval(()=>this.tick(),180)\n  }\n  tick() {\n    this.setState((state,props)=>{\n      let newState=nextGeneration(state.gen,{topLeft:[0,0],bottomRight:[17,17]});\n      return {gen:newState};\n    });\n  }\n  render() {\n    let colors=toColourLookup(this.state.gen)\n    let cells=genCells(colors);\n    return (\n      <div className=\"App\">\n        <svg width={800} height={800}>\n          {cells}\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst coords=[ [ 1, 5 ],\n[ 1, 11 ],\n[ 2, 5 ],\n[ 2, 11 ],\n[ 3, 5 ],\n[ 3, 6 ],\n[ 3, 10 ],\n[ 3, 11 ],\n[ 5, 1 ],\n[ 5, 2 ],\n[ 5, 3 ],\n[ 5, 6 ],\n[ 5, 7 ],\n[ 5, 9 ],\n[ 5, 10 ],\n[ 5, 13 ],\n[ 5, 14 ],\n[ 5, 15 ],\n[ 6, 3 ],\n[ 6, 5 ],\n[ 6, 7 ],\n[ 6, 9 ],\n[ 6, 11 ],\n[ 6, 13 ],\n[ 7, 5 ],\n[ 7, 6 ],\n[ 7, 10 ],\n[ 7, 11 ],\n[ 9, 5 ],\n[ 9, 6 ],\n[ 9, 10 ],\n[ 9, 11 ],\n[ 10, 3 ],\n[ 10, 5 ],\n[ 10, 7 ],\n[ 10, 9 ],\n[ 10, 11 ],\n[ 10, 13 ],\n[ 11, 1 ],\n[ 11, 2 ],\n[ 11, 3 ],\n[ 11, 6 ],\n[ 11, 7 ],\n[ 11, 9 ],\n[ 11, 10 ],\n[ 11, 13 ],\n[ 11, 14 ],\n[ 11, 15 ],\n[ 13, 5 ],\n[ 13, 6 ],\n[ 13, 10 ],\n[ 13, 11 ],\n[ 14, 5 ],\n[ 14, 11 ],\n[ 15, 5 ],\n[ 15, 11 ] ];\nReactDOM.render(<App gen={coords}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}